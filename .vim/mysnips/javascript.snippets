# Welcome Crunchysoul's JS snippets!

# foo
# foo

# deconstruction
snippet dec
const { ${2} } = ${1};
endsnippet

# const require
snippet reqc
const ${1} = require('$1');
endsnippet

# property:
snippet kvs
${1}: '${2}',
endsnippet

# property:
snippet kv
${1}: ${2},
endsnippet

# module.exports
snippet exmo
module.exports = {
	${0:${VISUAL}}
};
endsnippet

# Generator function
snippet gfn
function* ${1:name}(${2}) {
	yield ${3};
}
endsnippet

# Arrow function
# snippet rf "Arrow function" i
# (${1}) => {
# 	${2}
# }
# endsnippet

snippet ppaf
${1}: (${2}) => {
	${0:${VISUAL}}
},
endsnippet

snippet af
(${1}) => {
	${0:${VISUAL}}
}
endsnippet

# Arrow function Return
snippet afr "Arrow function Return" i
(${1}) => (
	${2}
)
endsnippet

snippet caf
const ${1} = (${2}) => {
	${0:${VISUAL}}
}
endsnippet

snippet cfr "constant AF Return"
const ${1:function_name} = (${2}) => (
	${0:${VISUAL}}
)
endsnippet

snippet hof "Higher Order Function"
const ${1:function_name} = (${2}) => ({${3}}) => (
	${0:${VISUAL}}
)
endsnippet

# Class
snippet class
class ${1:name} {
	constructor(${2:arg}) {
		${3:// init}
	}
	${4}
}
endsnippet

# For of loop
snippet forof
for (let ${1:s} of ${2:sequence}) {
	${3}
}
endsnippet

# Import
snippet im
import ${1:foo} from '${2:bar}'
endsnippet

# Export
snippet ex
export ${1:default} ${2:bar}
endsnippet
